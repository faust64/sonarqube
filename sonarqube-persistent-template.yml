apiVersion: v1
kind: Template
metadata:
  name: sonarqube
objects:
- apiVersion: v1
  data:
    sonar.properties: |-
      http.nonProxyHosts=${PROXY_EXCLUDE}
      http.proxyHost=${PROXY_HOST}
      http.proxyPassword=${PROXY_PASSWORD}
      http.proxyPort=${PROXY_PORT}
      http.proxyUser=${PROXY_USER}
      https.proxyHost=${PROXY_HOST}
      https.proxyPassword=${PROXY_PASSWORD}
      https.proxyPort=${PROXY_PORT}
      https.proxyUser=${PROXY_USER}
      ldap.bindDn=${LDAP_BINDDN}
      ldap.bindPassword=${LDAP_BINDPASSWD}
      ldap.url=${LDAP_URL}
      ldap.contextFactoryClass=${LDAP_CONTEXTFACTORY}
      ldap.StartTLS=${LDAP_STARTTLS}
      ldap.authentication=${LDAP_AUTHENTICATION}
      ldap.user.baseDn=${LDAP_USER_BASEDN}
      ldap.user.request=${LDAP_USER_REQUEST}
      ldap.user.realNameAttribute=${LDAP_USER_REAL_NAME_ATTR}
      ldap.user.emailAttribute=${LDAP_USER_EMAIL_ATTR}
      ldap.group.baseDn=${LDAP_GROUP_BASEDN}
      ldap.group.request=${LDAP_GROUP_REQUEST}
      ldap.group.idAttribute=${LDAP_GROUP_ID_ATTR}
      sonar.authenticator.createUsers=${SONAR_AUTOCREATE_USERS}
      sonar.forceAuthentication=${FORCE_AUTHENTICATION}
      sonar.jdbc.username=${POSTGRES_USERNAME}
      sonar.jdbc.password=${POSTGRES_PASSWORD}
      sonar.jdbc.url=jdbc:postgresql://sonardb:5432/${POSTGRES_DATABASE_NAME}
      sonar.log.console=true
      sonar.security.realm=${LDAP_REALM}
      sonar.web.javaAdditionalOpts="${OPTS_JVM_OPTS} -Djava.security.egd=file:/dev/./urandom"
      sonar.web.javaOpts=${MAIN_JVM_OPTS}
    wrapper.conf: |-
      wrapper.java.command=java
      wrapper.java.additional.1=-Dsonar.wrapped=true
      wrapper.java.additional.2=-Djava.awt.headless=true
      wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperSimpleApp
      wrapper.java.classpath.1=../../lib/jsw/*.jar
      wrapper.java.classpath.2=../../lib/common/*.jar
      wrapper.java.classpath.3=../../lib/*.jar
      wrapper.java.library.path.1=./lib
      wrapper.app.parameter.1=org.sonar.application.App
      wrapper.java.initmemory=8
      wrapper.java.maxmemory=32
      wrapper.console.format=PM
      wrapper.console.loglevel=INFO
      wrapper.logfile=../../logs/sonar.log
      wrapper.logfile.format=M
      wrapper.logfile.loglevel=INFO
      wrapper.syslog.loglevel=NONE
      wrapper.console.title=SonarQube
      wrapper.single_invocation=true
      wrapper.ntservice.name=SonarQube
      wrapper.ntservice.displayname=SonarQube
      wrapper.ntservice.dependency.1=
      wrapper.ntservice.starttype=AUTO_START
      wrapper.ntservice.interactive=false
      wrapper.disable_restarts=TRUE
      wrapper.ping.timeout=0
      wrapper.shutdown.timeout=300
      wrapper.jvm_exit.timeout=300
  kind: ConfigMap
  metadata:
    name: sonarqube-${FRONTNAME}
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: sonarqube
    name: sonarqube
  spec:
    tags:
    - annotations:
        description: The SonarQube Docker image
        tags: sonarqube
      from:
        kind: DockerImage
        name: docker.io/siamaksade/sonarqube:latest
      name: latest
- apiVersion: v1
  kind: Secret
  stringData:
    database-name: ${POSTGRES_DATABASE_NAME}
    database-password: ${POSTGRES_PASSWORD}
    database-user: ${POSTGRES_USERNAME}
  metadata:
    labels:
      app: sonarqube
    name: sonardb
  type: Opaque
- apiVersion: v1
  stringData:
    password: ${SONAR_LDAP_BIND_PASSWORD}
    username: ${SONAR_LDAP_BIND_DN}
  kind: Secret
  metadata:
    name: sonar-ldap-bind-dn
  type: kubernetes.io/basic-auth
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: sonarqube-data
  spec:
    accessModes: [ ReadWriteOnce ]
    resources:
      requests:
        storage: ${SONARQUBE_PERSISTENT_VOLUME_SIZE}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    generation: 1
    labels:
      app: sonarqube
    name: sonardb
  spec:
    replicas: 1
    selector:
      name: sonardb
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      type: Recreate
    template:
      metadata:
        labels:
          name: sonardb
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: sonardb
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: sonardb
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: sonardb
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              memory: ${POSTGRES_CONTAINER_MEMORY_REQUEST}
              cpu: ${POSTGRES_CONTAINER_CPU_REQUEST}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: sonardb-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: sonardb-data
          persistentVolumeClaim:
            claimName: sonardb
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
          - postgresql
        from:
          kind: ImageStreamTag
          name: 'postgresql:9.6'
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    generation: 1
    labels:
      app: sonarqube
    name: sonarqube
  spec:
    replicas: 1
    selector:
      app: sonarqube
      deploymentconfig: sonarqube
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      type: Recreate
    template:
      metadata:
        labels:
          app: sonarqube
          deploymentconfig: sonarqube
      spec:
        containers:
        - imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 45
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: sonarqube
          ports:
          - containerPort: 9000
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: ${SONARQUBE_CPU_REQUEST}
              memory: ${SONARQUBE_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /opt/sonarqube/data
            name: data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: sonarqube-data
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - sonarqube
        from:
          kind: ImageStreamTag
          name: sonarqube:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: sonarqube
    name: sonarqube
  spec:
    port:
      targetPort: 9000-tcp
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: sonarqube
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    labels:
      app: sonarqube
    name: sonardb
  spec:
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: sonardb
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: sonarqube
    name: sonarqube
  spec:
    ports:
    - name: 9000-tcp
      port: 9000
      protocol: TCP
      targetPort: 9000
    selector:
      deploymentconfig: sonarqube
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: sonarqube
    name: sonardb
  spec:
    accessModes: [ ReadWriteOnce ]
    resources:
      requests:
        storage: ${POSTGRES_PERSISTENT_VOLUME_CLAIM_SIZE}
parameters:
- description: Main JVM Configuration
  displayName: Main JVM Configuration
  name: MAIN_JVM_OPTS
  value: "-Xmx512m -Xms512m -XX:+HeapDumpOnOutOfMemoryError"
- description: Optional JVM Configuration
  displayName: Optional JVM Configuration
  name: OPTS_JVM_OPTS
- name: LDAP_BIND_DN
  description: When using LDAP authentication, this is the Distinguished Name used for binding to the LDAP server
  displayName: LDAP Bind DN
- name: LDAP_BIND_PASSWORD
  description: When using LDAP for authentication, this is the password with which to bind to the LDAP server
  displayName: LDAP Bind Password
- name: LDAP_URL
  description: When using LDAP for authentication, this is the URL of the LDAP server in the form of ldap(s)://<hostname>:<port>
  displayName: LDAP Server URL
- name: LDAP_REALM
  description: When using LDAP, this allows for specifying a Realm within the directory server (Usually not used)
  displayName: LDAP Realm
- name: LDAP_AUTHENTICATION
  description: When using LDAP, this is the bind method (simple, GSSAPI, kerberos, CRAM-MD5, DIGEST-MD5)
  displayName: LDAP Bind Mode
- name: LDAP_USER_BASEDN
  description: The Base DN under which SonarQube should search for user accounts in the LDAP directory
  displayName: LDAP User Base DN
- name: LDAP_USER_REAL_NAME_ATTR
  description: The LDAP attribute which should be referenced to get a user's full name
  displayName: LDAP Real Name Attribute
- name: LDAP_USER_EMAIL_ATTR
  description: The LDAP attribute which should be referenced to get a user's e-mail address
  displayName: LDAP User E-Mail Attribute
- name: LDAP_USER_REQUEST
  description: An LDAP filter to be used to search for user objects in the LDAP directory
  displayName: LDAP User Request Filter
- name: LDAP_GROUP_BASEDN
  description: The Base DN under which SonarQube should search for groups in the LDAP directory
  displayName: LDAP Group Base DN
- name: LDAP_GROUP_REQUEST
  description: An LDAP filter to be used to search for group objects in the LDAP directory
  displayName: LDAP Group Request Filter
- name: LDAP_GROUP_ID_ATTR
  description: The LDAP attribute which should be referenced to get a group's ID
  displayName: LDAP Group Name Attribute
- name: LDAP_CONTEXTFACTORY
  description: The ContextFactory implementation to be used when communicating with the LDAP server
  displayName: LDAP Context Factory
  value: com.sun.jndi.ldap.LdapCtxFactory
- description: Password for the Posgres Database to be used by Sonarqube
  displayName: Postgres password
  name: POSTGRES_PASSWORD
  generate: expression
  from: '[a-zA-Z0-9]{16}'
  required: true
- description: Username for the Posgres Database to be used by Sonarqube
  displayName: Postgres username
  name: POSTGRES_USERNAME
  generate: expression
  from: 'user[a-z0-9]{8}'
  required: true
- description: Database name for the Posgres Database to be used by Sonarqube
  displayName: Postgres database name
  name: POSTGRES_DATABASE_NAME
  value: sonar
  required: true
- description: Postgres Persistent volume claim size
  displayName: Postgres Persistent volume claim size
  name: POSTGRES_PERSISTENT_VOLUME_CLAIM_SIZE
  value: 5Gi
  required: true
- description: Postgres Container Memory size request
  displayName: Postgres Container Memory size request
  name: POSTGRES_CONTAINER_MEMORY_REQUEST
  value: 128Mi
- description: Postgres Container CPU request
  displayName: Postgres Container CPU request
  name: POSTGRES_CONTAINER_CPU_REQUEST
  value: 50m
- name: SONARQUBE_MEMORY_REQUEST
  description: SonarQube memory request
  displayName: SonarQube memory request
  value: 2Gi
- name: SONARQUBE_CPU_REQUEST
  description: SonarQube Container CPU request
  displayName: SonarQube Container CPU request
  value: 100m
- name: SONARQUBE_PERSISTENT_VOLUME_SIZE
  description: The persistent storage volume for SonarQube to use for plugins/config/logs/etc...
  displayName: SonarQube Storage Space Size
  required: true
  value: 5Gi
- name: FORCE_AUTHENTICATION
  displayName: Force authentication
  value: "false"
- name: SONAR_AUTH_REALM
  description: The type of authentication that SonarQube should be using (None or LDAP) (Ref - https://docs.sonarqube.org/display/PLUG/LDAP+Plugin)
  displayName: SonarQube Authentication Realm
- name: SONAR_AUTOCREATE_USERS
  value: 'false'
  description: When using an external authentication system, should SonarQube automatically create accounts for users?
  displayName: Enable auto-creation of users from external authentication systems?
  required: true
- name: PROXY_HOST
  description: Hostname of proxy server the SonarQube application should use to access the Internet
  displayName: Proxy server hostname/IP
- name: PROXY_PORT
  description: TCP port of proxy server the SonarQube application should use to access the Internet
  displayName: Proxy server port
- name: PROXY_USER
  description: Username credential when the Proxy Server requires authentication
  displayName: Proxy server username
- name: PROXY_PASSWORD
  description: Password credential when the Proxy Server requires authentication
  displayName: Proxy server password
